from flask import Flask, render_template, request, jsonify
from flask import Flask, send_from_directory, request, jsonify
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.chains import RetrievalQA
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate
import os
import re
# Ajoute cette ligne en haut de app.py juste apr√®s from flask import ‚Ä¶
from flask_cors import CORS

FRONT_DIST = os.path.join(os.path.dirname(__file__), "../FrontendReact/dist")

app = Flask(__name__)
CORS(app, resources={r"/ask": {"origins": "*"}})   # ou limite au domaine de ton client
# Configuration Groq
GROQ_API_KEY = "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"

# ===== NOUVELLE CLASSE POUR G√âRER LES TARIFS =====
class TarifsRemboursement:
    """Classe pour g√©rer les tarifs de remboursement selon la Loi n¬∞ 2004-71"""
    
    def __init__(self):
        self.tarifs = {
            "consultations": {
                "medecin_generaliste": {
                    "tarif_conventionnel": 25.0,
                    "taux_remboursement": 70,
                    "montant_rembourse": 17.5,
                    "description": "Consultation m√©decin g√©n√©raliste"
                },
                "medecin_specialiste": {
                    "tarif_conventionnel": 40.0,
                    "taux_remboursement": 70,
                    "montant_rembourse": 28.0,
                    "description": "Consultation m√©decin sp√©cialiste"
                },
                "consultation_urgence": {
                    "tarif_conventionnel": 35.0,
                    "taux_remboursement": 70,
                    "montant_rembourse": 24.5,
                    "description": "Consultation en urgence"
                },
                "visite_domicile": {
                    "tarif_conventionnel": 50.0,
                    "taux_remboursement": 70,
                    "montant_rembourse": 35.0,
                    "description": "Visite √† domicile"
                }
            },
            "pharmacie": {
                "medicaments_essentiels": {
                    "taux_remboursement": 85,
                    "description": "Liste A - M√©dicaments vitaux et essentiels",
                    "exemples": "Antibiotiques, insuline, m√©dicaments cardiaques"
                },
                "medicaments_importants": {
                    "taux_remboursement": 70,
                    "description": "Liste B - M√©dicaments importants",
                    "exemples": "Anti-inflammatoires, antidouleurs"
                },
                "medicaments_complementaires": {
                    "taux_remboursement": 40,
                    "description": "Liste C - M√©dicaments compl√©mentaires",
                    "exemples": "Vitamines, compl√©ments alimentaires"
                },
                "generiques": {
                    "taux_remboursement": 85,
                    "description": "M√©dicaments g√©n√©riques encourag√©s",
                    "avantage": "M√™me remboursement que les essentiels"
                }
            },
            "hospitalisation": {
                "secteur_public": {
                    "taux_remboursement": 90,
                    "description": "H√¥pitaux publics conventionn√©s",
                    "franchise": "Ticket mod√©rateur de 10%"
                },
                "secteur_prive": {
                    "taux_remboursement": 70,
                    "description": "Cliniques priv√©es conventionn√©es",
                    "franchise": "Ticket mod√©rateur de 30%"
                },
                "chirurgie": {
                    "taux_remboursement": 85,
                    "description": "Interventions chirurgicales",
                    "conditions": "Selon nomenclature officielle"
                }
            },
            "analyses_examens": {
                "biologie_medicale": {
                    "taux_remboursement": 70,
                    "description": "Analyses biologiques courantes",
                    "exemples": "Analyses sanguines, urinaires"
                },
                "imagerie_medicale": {
                    "taux_remboursement": 70,
                    "description": "Imagerie m√©dicale",
                    "exemples": "Radiographie, √©chographie, scanner"
                },
                "examens_specialises": {
                    "taux_remboursement": 70,
                    "description": "Examens sp√©cialis√©s",
                    "exemples": "ECG, EEG, endoscopie"
                }
            },
            "dentaire": {
                "soins_conservateurs": {
                    "taux_remboursement": 70,
                    "description": "Soins dentaires conservateurs",
                    "exemples": "Plombages, d√©tartrages"
                },
                "protheses": {
                    "taux_remboursement": 50,
                    "description": "Proth√®ses dentaires",
                    "conditions": "Sur devis et accord pr√©alable"
                }
            }
        }
        
        # Cotisations et plafonds selon Article 15
        self.cotisations = {
            "taux_cotisation_base": 6.75,  # % du salaire (Article 15)
            "repartition": {
                "employeur": 4.75,  # %
                "salarie": 2.0      # %
            },
            "plafond_mensuel": 2400.0,  # Dinars tunisiens
            "salaire_minimum": 400.0,   # SMIG
            "plafond_annuel": 28800.0   # 2400 x 12
        }
        
        # Franchises et tickets mod√©rateurs
        self.franchises = {
            "consultation_base": 2.0,  # DT
            "medicaments": {
                "minimum": 1.0,
                "maximum": 10.0
            },
            "hospitalisation": {
                "public": "10% des frais",
                "prive": "30% des frais"
            }
        }

    def get_remboursement_info(self, categorie, sous_categorie=None):
        """R√©cup√®re les informations de remboursement"""
        if categorie in self.tarifs:
            if sous_categorie and sous_categorie in self.tarifs[categorie]:
                return self.tarifs[categorie][sous_categorie]
            return self.tarifs[categorie]
        return None

    def calculer_cotisation(self, salaire):
        """Calcule la cotisation mensuelle selon Article 15"""
        salaire_plafonn√© = min(salaire, self.cotisations["plafond_mensuel"])
        cotisation_totale = salaire_plafonn√© * (self.cotisations["taux_cotisation_base"] / 100)
        
        return {
            "salaire_declare": salaire,
            "salaire_de_reference": salaire_plafonn√©,
            "cotisation_totale": round(cotisation_totale, 2),
            "part_employeur": round(salaire_plafonn√© * (self.cotisations["repartition"]["employeur"] / 100), 2),
            "part_salarie": round(salaire_plafonn√© * (self.cotisations["repartition"]["salarie"] / 100), 2),
            "cotisation_annuelle": round(cotisation_totale * 12, 2)
        }

    def calculer_remboursement(self, categorie, sous_categorie, montant):
        """Calcule le remboursement pour un montant donn√©"""
        info = self.get_remboursement_info(categorie, sous_categorie)
        if not info or 'taux_remboursement' not in info:
            return None
            
        taux = info['taux_remboursement']
        montant_rembourse = montant * (taux / 100)
        ticket_moderateur = montant - montant_rembourse
        
        return {
            "montant_initial": montant,
            "taux_remboursement": taux,
            "montant_rembourse": round(montant_rembourse, 2),
            "ticket_moderateur": round(ticket_moderateur, 2),
            "description": info.get('description', '')
        }

# ===== FONCTIONS DE D√âTECTION ET G√âN√âRATION =====

def detect_tariff_question(query):
    """D√©tecte si la question concerne les tarifs de remboursement"""
    
    keywords_fr = [
        'tarif', 'remboursement', 'rembourse', 'cotisation', 'co√ªt', 'prix',
        'combien', 'montant', 'pourcentage', 'taux', 'plafond', 'franchise',
        'ticket mod√©rateur', 'consultation', 'm√©decin', 'm√©dicament', 'h√¥pital',
        'dentiste', 'analyse', 'examen', 'pay√©', 'pay√©e', 'salaire'
    ]
    
    keywords_ar = [
        'ÿ™ÿπÿ±ŸäŸÅÿ©', 'ÿßÿ≥ÿ™ÿ±ÿØÿßÿØ', 'ÿßÿ¥ÿ™ÿ±ÿßŸÉ', 'ŸÖÿ≥ÿßŸáŸÖÿ©', 'ŸÉŸÑŸÅÿ©', 'ÿ≥ÿπÿ±', 'ÿ™ŸÉŸÑŸÅÿ©',
        'ŸÉŸÖ', 'ŸÖÿ®ŸÑÿ∫', 'ŸÜÿ≥ÿ®ÿ©', 'ŸÖÿπÿØŸÑ', 'ÿ≥ŸÇŸÅ', 'ÿßŸÖÿ™Ÿäÿßÿ≤', 'ÿ≠ÿµÿ©',
        'ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ©', 'ÿ∑ÿ®Ÿäÿ®', 'ÿØŸàÿßÿ°', 'ŸÖÿ≥ÿ™ÿ¥ŸÅŸâ', 'ÿ∑ÿ®Ÿäÿ® ÿ£ÿ≥ŸÜÿßŸÜ',
        'ÿ™ÿ≠ŸÑŸäŸÑ', 'ŸÅÿ≠ÿµ', 'ÿ±ÿßÿ™ÿ®', 'ÿ£ÿ¨ÿ±'
    ]
    
    query_lower = query.lower()
    
    return (any(keyword in query_lower for keyword in keywords_fr) or
            any(keyword in query for keyword in keywords_ar))

def detect_cotisation_question(query):
    """D√©tecte sp√©cifiquement les questions sur les cotisations"""
    cotisation_keywords = [
        'cotisation', 'salaire', 'employeur', 'salari√©', 'calculer',
        'ÿßÿ¥ÿ™ÿ±ÿßŸÉ', 'ÿ±ÿßÿ™ÿ®', 'ÿ±ÿ® ÿπŸÖŸÑ', 'ÿ£ÿ¨Ÿäÿ±', 'ÿ≠ÿ≥ÿßÿ®'
    ]
    
    query_lower = query.lower()
    return any(keyword in query_lower or keyword in query for keyword in cotisation_keywords)

def extract_salary_from_query(query):
    """Extrait le montant du salaire d'une question"""
    import re
    numbers = re.findall(r'\d+(?:\.\d+)?', query)
    return float(numbers[0]) if numbers else None

def generate_tariff_response(query, language='fr'):
    """G√©n√®re une r√©ponse sp√©cialis√©e pour les tarifs"""
    
    tarifs = TarifsRemboursement()
    
    # V√©rifier si c'est une question sur les cotisations
    if detect_cotisation_question(query):
        salary = extract_salary_from_query(query)
        if salary:
            calcul = tarifs.calculer_cotisation(salary)
            if language == 'fr':
                return f"""**üíº CALCUL DE COTISATION - ARTICLE 15**

**Salaire d√©clar√© :** {calcul['salaire_declare']} DT
**Salaire de r√©f√©rence :** {calcul['salaire_de_reference']} DT (plafonn√© √† 2 400 DT)

**R√©partition des cotisations (6,75% total) :**
‚Ä¢ Part employeur : {calcul['part_employeur']} DT (4,75%)
‚Ä¢ Part salari√© : {calcul['part_salarie']} DT (2%)
‚Ä¢ **Total mensuel : {calcul['cotisation_totale']} DT**
‚Ä¢ **Total annuel : {calcul['cotisation_annuelle']} DT**

*Base l√©gale : Article 15 de la Loi n¬∞ 2004-71*"""
            else:
                return f"""**üíº ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ - ÿßŸÑŸÖÿßÿØÿ© ÿßŸÑÿÆÿßŸÖÿ≥ÿ© ÿπÿ¥ÿ±ÿ©**

**ÿßŸÑÿ±ÿßÿ™ÿ® ÿßŸÑŸÖÿµÿ±ÿ≠ ÿ®Ÿá :** {calcul['salaire_declare']} ÿØŸäŸÜÿßÿ±
**ÿ±ÿßÿ™ÿ® ÿßŸÑŸÖÿ±ÿ¨ÿπ :** {calcul['salaire_de_reference']} ÿØŸäŸÜÿßÿ± (ŸÖÿ≠ÿØŸàÿØ ÿ®ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπŸÖÿßÿ¶ÿ© ÿØŸäŸÜÿßÿ±)

**ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ (ÿ≥ÿ™ÿ© ŸÅÿßÿµŸÑ ÿÆŸÖÿ≥ÿ© Ÿàÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ÿ•ÿ¨ŸÖÿßŸÑŸä) :**
‚Ä¢ ÿ≠ÿµÿ© ÿ±ÿ® ÿßŸÑÿπŸÖŸÑ : {calcul['part_employeur']} ÿØŸäŸÜÿßÿ± (ÿ£ÿ±ÿ®ÿπÿ© ŸÅÿßÿµŸÑ ÿÆŸÖÿ≥ÿ© Ÿàÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©)
‚Ä¢ ÿ≠ÿµÿ© ÿßŸÑÿ£ÿ¨Ÿäÿ± : {calcul['part_salarie']} ÿØŸäŸÜÿßÿ± (ÿßÿ´ŸÜÿßŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©)
‚Ä¢ **ÿßŸÑŸÖÿ¨ŸÖŸàÿπ ÿßŸÑÿ¥Ÿáÿ±Ÿä : {calcul['cotisation_totale']} ÿØŸäŸÜÿßÿ±**
‚Ä¢ **ÿßŸÑŸÖÿ¨ŸÖŸàÿπ ÿßŸÑÿ≥ŸÜŸàŸä : {calcul['cotisation_annuelle']} ÿØŸäŸÜÿßÿ±**

*ÿßŸÑÿ£ÿ≥ÿßÿ≥ ÿßŸÑŸÇÿßŸÜŸàŸÜŸä : ÿßŸÑŸÖÿßÿØÿ© ÿßŸÑÿÆÿßŸÖÿ≥ÿ© ÿπÿ¥ÿ±ÿ© ŸÖŸÜ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©*"""
    
    # R√©ponse g√©n√©rale sur les tarifs
    if language == 'fr':
        response = """**üí∞ TARIFS DE REMBOURSEMENT - LOI N¬∞ 2004-71**

**üìã CONSULTATIONS M√âDICALES**
‚Ä¢ M√©decin g√©n√©raliste : 70% de ‚ÄØ35‚Äì45‚ÄØDT DT
‚Ä¢ M√©decin sp√©cialiste : 70% de ‚ÄØ50‚Äì70‚ÄØDT DT
‚Ä¢ Consultation urgence : 70%
‚Ä¢ Visite √† domicile : 70% 

**üíä M√âDICAMENTS (selon listes officielles)**
‚Ä¢ Liste A (essentiels) : **85% de remboursement**
‚Ä¢ Liste B (importants) : **70% de remboursement**
‚Ä¢ Liste C (compl√©mentaires) : **40% de remboursement**
‚Ä¢ M√©dicaments g√©n√©riques : **85% de remboursement**

**üè• HOSPITALISATION**
‚Ä¢ Secteur public : **90% des frais** (ticket mod√©rateur 10%)
‚Ä¢ Secteur priv√© conventionn√© : **70% des frais** (ticket mod√©rateur 30%)
‚Ä¢ Chirurgie : **85% selon nomenclature**

**üî¨ ANALYSES ET EXAMENS**
‚Ä¢ Biologie m√©dicale : **70% du tarif conventionnel**
‚Ä¢ Imagerie m√©dicale : **70% du tarif conventionnel**
‚Ä¢ Examens sp√©cialis√©s : **70% du tarif conventionnel**

**ü¶∑ SOINS DENTAIRES**
‚Ä¢ Soins conservateurs : **70% de remboursement**
‚Ä¢ Proth√®ses dentaires : **50% sur accord pr√©alable**

**üíº COTISATIONS (Article 15)**
‚Ä¢ Taux total : **6,75% du salaire**
‚Ä¢ Part employeur : **4,75%** | Part salari√© : **2%**
‚Ä¢ Plafond mensuel : **2 400 DT** | Plafond annuel : **28 800 DT**

**‚öñÔ∏è BASE L√âGALE**
Articles 14, 15, 26 et 27 de la Loi n¬∞ 2004-71"""
        
    else:  # Arabic
        response = """**üí∞ ÿ™ÿπÿ±ŸäŸÅÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿØÿßÿØ - ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©**

**üìã ÿßŸÑÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑÿ∑ÿ®Ÿäÿ©**
‚Ä¢ ÿ∑ÿ®Ÿäÿ® ÿπÿßŸÖ : ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿÆŸÖÿ≥ÿ© Ÿàÿπÿ¥ÿ±ŸäŸÜ ÿØŸäŸÜÿßÿ±ÿßŸã = **ÿ≥ÿ®ÿπÿ© ÿπÿ¥ÿ± ÿØŸäŸÜÿßÿ±ÿßŸã ŸàŸÜÿµŸÅ**
‚Ä¢ ÿ∑ÿ®Ÿäÿ® ŸÖÿÆÿ™ÿµ : ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿ£ÿ±ÿ®ÿπŸäŸÜ ÿØŸäŸÜÿßÿ±ÿßŸã = **ÿ´ŸÖÿßŸÜŸäÿ© Ÿàÿπÿ¥ÿ±ŸàŸÜ ÿØŸäŸÜÿßÿ±ÿßŸã**
‚Ä¢ ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ÿ∑ÿßÿ±ÿ¶ÿ© : ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿÆŸÖÿ≥ÿ© Ÿàÿ´ŸÑÿßÿ´ŸäŸÜ ÿØŸäŸÜÿßÿ±ÿßŸã = **ÿ£ÿ±ÿ®ÿπÿ© Ÿàÿπÿ¥ÿ±ŸàŸÜ ÿØŸäŸÜÿßÿ±ÿßŸã ŸàŸÜÿµŸÅ**
‚Ä¢ ÿ≤Ÿäÿßÿ±ÿ© ŸÖŸÜÿ≤ŸÑŸäÿ© : ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿÆŸÖÿ≥ŸäŸÜ ÿØŸäŸÜÿßÿ±ÿßŸã = **ÿÆŸÖÿ≥ÿ© Ÿàÿ´ŸÑÿßÿ´ŸàŸÜ ÿØŸäŸÜÿßÿ±ÿßŸã**

**üíä ÿßŸÑÿ£ÿØŸàŸäÿ© (ÿ≠ÿ≥ÿ® ÿßŸÑŸÇŸàÿßÿ¶ŸÖ ÿßŸÑÿ±ÿ≥ŸÖŸäÿ©)**
‚Ä¢ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ŸàŸÑŸâ (ÿ£ÿ≥ÿßÿ≥Ÿäÿ©) : **ÿÆŸÖÿ≥ÿ© Ÿàÿ´ŸÖÿßŸÜŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©**
‚Ä¢ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ´ÿßŸÜŸäÿ© (ŸÖŸáŸÖÿ©) : **ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©**
‚Ä¢ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ´ÿßŸÑÿ´ÿ© (ÿ™ŸÉŸÖŸäŸÑŸäÿ©) : **ÿ£ÿ±ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©**
‚Ä¢ ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑÿ¨ŸÜŸäÿ≥ÿ© : **ÿÆŸÖÿ≥ÿ© Ÿàÿ´ŸÖÿßŸÜŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©**

**üè• ÿßŸÑÿßÿ≥ÿ™ÿ¥ŸÅÿßÿ°**
‚Ä¢ ÿßŸÑŸÇÿ∑ÿßÿπ ÿßŸÑÿπÿßŸÖ : **ÿ™ÿ≥ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ** (ÿ≠ÿµÿ© ÿπÿ¥ÿ±ÿ© ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©)
‚Ä¢ ÿßŸÑŸÇÿ∑ÿßÿπ ÿßŸÑÿÆÿßÿµ ÿßŸÑŸÖÿ™ÿπÿßŸÇÿØ : **ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ** (ÿ≠ÿµÿ© ÿ´ŸÑÿßÿ´ŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©)
‚Ä¢ ÿßŸÑÿ¨ÿ±ÿßÿ≠ÿ© : **ÿÆŸÖÿ≥ÿ© Ÿàÿ´ŸÖÿßŸÜŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ÿ≠ÿ≥ÿ® ÿßŸÑÿ™ÿ≥ÿπŸäÿ±ÿ©**

**üî¨ ÿßŸÑÿ™ÿ≠ÿßŸÑŸäŸÑ ŸàÿßŸÑŸÅÿ≠Ÿàÿµÿßÿ™**
‚Ä¢ ÿßŸÑÿ®ŸäŸàŸÑŸàÿ¨Ÿäÿß ÿßŸÑÿ∑ÿ®Ÿäÿ© : **ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿßŸÑÿ™ÿπÿ±ŸäŸÅÿ© ÿßŸÑÿ™ÿπÿßŸÇÿØŸäÿ©**
‚Ä¢ ÿßŸÑÿ™ÿµŸàŸäÿ± ÿßŸÑÿ∑ÿ®Ÿä : **ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿßŸÑÿ™ÿπÿ±ŸäŸÅÿ© ÿßŸÑÿ™ÿπÿßŸÇÿØŸäÿ©**
‚Ä¢ ÿßŸÑŸÅÿ≠Ÿàÿµÿßÿ™ ÿßŸÑŸÖÿ™ÿÆÿµÿµÿ© : **ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿßŸÑÿ™ÿπÿ±ŸäŸÅÿ© ÿßŸÑÿ™ÿπÿßŸÇÿØŸäÿ©**

**ü¶∑ ÿßŸÑÿπŸÜÿßŸäÿ© ÿ®ÿßŸÑÿ£ÿ≥ŸÜÿßŸÜ**
‚Ä¢ ÿßŸÑÿπŸÑÿßÿ¨ÿßÿ™ ÿßŸÑÿ™ÿ≠ŸÅÿ∏Ÿäÿ© : **ÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©**
‚Ä¢ ÿßŸÑÿ£ÿ∑ÿ±ÿßŸÅ ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸäÿ© : **ÿÆŸÖÿ≥ŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ÿ®ŸÖŸàÿßŸÅŸÇÿ© ŸÖÿ≥ÿ®ŸÇÿ©**

**üíº ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ (ÿßŸÑŸÖÿßÿØÿ© ÿßŸÑÿÆÿßŸÖÿ≥ÿ© ÿπÿ¥ÿ±ÿ©)**
‚Ä¢ ÿßŸÑŸÖÿπÿØŸÑ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä : **ÿ≥ÿ™ÿ© ŸÅÿßÿµŸÑ ÿÆŸÖÿ≥ÿ© Ÿàÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ© ŸÖŸÜ ÿßŸÑÿ±ÿßÿ™ÿ®**
‚Ä¢ ÿ≠ÿµÿ© ÿ±ÿ® ÿßŸÑÿπŸÖŸÑ : **ÿ£ÿ±ÿ®ÿπÿ© ŸÅÿßÿµŸÑ ÿÆŸÖÿ≥ÿ© Ÿàÿ≥ÿ®ÿπŸàŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©** | ÿ≠ÿµÿ© ÿßŸÑÿ£ÿ¨Ÿäÿ± : **ÿßÿ´ŸÜÿßŸÜ ÿ®ÿßŸÑŸÖÿßÿ¶ÿ©**
‚Ä¢ ÿßŸÑÿ≥ŸÇŸÅ ÿßŸÑÿ¥Ÿáÿ±Ÿä : **ÿ£ŸÑŸÅÿßŸÜ Ÿàÿ£ÿ±ÿ®ÿπŸÖÿßÿ¶ÿ© ÿØŸäŸÜÿßÿ±** | ÿßŸÑÿ≥ŸÇŸÅ ÿßŸÑÿ≥ŸÜŸàŸä : **ÿ´ŸÖÿßŸÜŸäÿ© Ÿàÿπÿ¥ÿ±ŸàŸÜ ÿ£ŸÑŸÅÿßŸã Ÿàÿ´ŸÖÿßŸÜŸÖÿßÿ¶ÿ© ÿØŸäŸÜÿßÿ±**

**‚öñÔ∏è ÿßŸÑÿ£ÿ≥ÿßÿ≥ ÿßŸÑŸÇÿßŸÜŸàŸÜŸä**
ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿ±ÿßÿ®ÿπÿ© ÿπÿ¥ÿ±ÿ© ŸàÿßŸÑÿÆÿßŸÖÿ≥ÿ© ÿπÿ¥ÿ±ÿ© ŸàÿßŸÑÿ≥ÿßÿØÿ≥ÿ© ŸàÿßŸÑÿπÿ¥ÿ±ŸàŸÜ ŸàÿßŸÑÿ≥ÿßÿ®ÿπÿ© ŸàÿßŸÑÿπÿ¥ÿ±ŸàŸÜ ŸÖŸÜ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©"""
    
    return response.strip()

# ===== FONCTIONS EXISTANTES (SANS MODIFICATION) =====

def detect_language(text):
    """D√©tecte si le texte est en arabe ou en fran√ßais"""
    if not text:
        return 'fr'
    
    # Compter les caract√®res arabes
    arabic_chars = re.findall(r'[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]', text)
    arabic_ratio = len(arabic_chars) / len(text) if text else 0
    
    # Si plus de 20% de caract√®res arabes, c'est de l'arabe
    if arabic_ratio > 0.2:
        return 'ar'
    
    # Mots-cl√©s arabes courants
    arabic_keywords = [
        'ÿ£ŸáŸÑÿß', 'ŸÖÿ±ÿ≠ÿ®ÿß', 'ŸÖÿ±ÿ≠ÿ®ÿßŸã', 'ÿßŸÑÿ≥ŸÑÿßŸÖ', 'ÿµÿ®ÿßÿ≠', 'ŸÖÿ≥ÿßÿ°',
        'ŸÖÿß', 'ŸáŸà', 'ŸáŸä', 'ŸÉŸäŸÅ', 'ŸÖÿ™Ÿâ', 'ÿ£ŸäŸÜ', 'ŸÖŸÜ', 'ŸÑŸÖÿßÿ∞ÿß', 'ŸáŸÑ',
        'ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ', 'ÿßŸÑÿµÿ≠Ÿä', 'ÿßŸÑÿµÿ≠ÿ©', 'ÿßŸÑŸÇÿßŸÜŸàŸÜ', 'ÿßŸÑŸÖÿ±ÿ∂', 'ÿßŸÑÿ∂ŸÖÿßŸÜ',
        'ÿßŸÑÿµŸÜÿØŸàŸÇ', 'ÿßŸÑŸàÿ∑ŸÜŸä', 'ÿ¥ÿ±Ÿàÿ∑', 'ÿßŸÜÿ™ÿ≥ÿßÿ®', 'ÿßÿ≥ÿ™ÿ±ÿØÿßÿØ', 'ÿ≠ŸÇŸàŸÇ'
    ]
    
    # Mots-cl√©s fran√ßais courants
    french_keywords = [
        'bonjour', 'salut', 'bonsoir',
        'quoi', 'comment', 'quand', 'o√π', 'qui', 'pourquoi',
        'assurance', 'maladie', 'sant√©', 'loi', 'cnam',
        'conditions', 'affiliation', 'remboursement', 'droits'
    ]
    
    text_lower = text.lower()
    
    # Compter les correspondances
    arabic_matches = sum(1 for keyword in arabic_keywords if keyword in text)
    french_matches = sum(1 for keyword in french_keywords if keyword in text_lower)
    
    # D√©cision bas√©e sur les mots-cl√©s
    if arabic_matches > 0:
        return 'ar'
    elif french_matches > 0:
        return 'fr'
    
    # Par d√©faut, retourner fran√ßais
    return 'fr'

# Prompt sp√©cialis√© pour le fran√ßais
FRENCH_PROMPT = """
Tu es un agent expert sp√©cialis√© en Loi n¬∞ 2004-71 du 2 ao√ªt 2004, portant institution d'un r√©gime d'assurance-maladie en Tunisie.

R√îLE ET EXPERTISE :
- Expert juridique en assurance-maladie tunisienne
- Sp√©cialiste de la Loi n¬∞ 2004-71 et ses applications
- Conseiller en droits et obligations des assur√©s sociaux
- Guide pour les proc√©dures administratives de la CNAM

DOMAINES DE COMP√âTENCE :
‚úÖ R√©gime d'assurance-maladie obligatoire
‚úÖ Prestations couvertes et non couvertes
‚úÖ Conditions d'affiliation et de b√©n√©fice
‚úÖ Proc√©dures de remboursement
‚úÖ Droits des assur√©s et ayants droit
‚úÖ Obligations des employeurs et salari√©s
‚úÖ Sanctions et contentieux
‚úÖ Relations avec la CNAM (Caisse Nationale d'Assurance Maladie)

INSTRUCTIONS DE R√âPONSE :
1. Toujours citer les articles sp√©cifiques de la Loi n¬∞ 2004-71 quand applicable
2. Donner des r√©ponses pr√©cises, pratiques et actionables
3. Expliquer les proc√©dures √©tape par √©tape
4. Mentionner les d√©lais l√©gaux et administratifs
5. Indiquer les documents requis pour chaque d√©marche
6. Signaler les droits de recours en cas de litige

CONTEXTE L√âGAL :
Loi n¬∞ 2004-71 du 2 ao√ªt 2004, portant institution d'un r√©gime d'assurance-maladie en R√©publique Tunisienne, et tous ses d√©crets d'application.

QUESTION : {question}

DOCUMENTS DE R√âF√âRENCE :
{context}

R√âPONSE EXPERTE :
Bas√©e sur la Loi n¬∞ 2004-71 et les documents juridiques fournis, voici ma r√©ponse d√©taill√©e :
"""

# Prompt arabe ULTRA RENFORC√â
ARABIC_PROMPT = """
ÿ£ŸÜÿ™ ÿÆÿ®Ÿäÿ± ŸÇÿßŸÜŸàŸÜŸä ÿ™ŸàŸÜÿ≥Ÿä ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ŸÇÿßŸÜŸàŸÜ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂.

ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸáŸÖ ÿ¨ÿØÿßŸã:
- Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉÿ™ÿ® ŸÉŸÑ ŸÉŸÑŸÖÿ© ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸÅŸÇÿ∑
- ŸÖŸÖŸÜŸàÿπ ŸÖŸÜÿπÿßŸã ÿ®ÿßÿ™ÿßŸã ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£Ÿä ÿ≠ÿ±ŸÅ ÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿä ÿ£Ÿà ŸÅÿ±ŸÜÿ≥Ÿä
- ŸÖŸÖŸÜŸàÿπ ŸÉÿ™ÿßÿ®ÿ© ÿ£Ÿä ÿ±ŸÇŸÖ ÿ®ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑŸÑÿßÿ™ŸäŸÜŸäÿ©
- ŸÖŸÖŸÜŸàÿπ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£Ÿä ŸÖÿµÿ∑ŸÑÿ≠ ÿ£ÿ¨ŸÜÿ®Ÿä ŸÖÿ´ŸÑ: cotisations, transfert, revenues, valuations, etc.
- ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿπÿ±ŸÅ ÿßŸÑÿ™ÿ±ÿ¨ŸÖÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸÑŸÖÿµÿ∑ŸÑÿ≠ÿå ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸàÿµŸÅÿßŸã ÿπÿ±ÿ®ŸäÿßŸã ÿ®ÿØŸäŸÑÿßŸã

ŸÖÿ´ÿßŸÑ ÿπŸÑŸâ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©:
"ÿ®ŸÖŸàÿ¨ÿ® ÿßŸÑŸÖÿßÿØÿ© ÿßŸÑÿ´ÿßŸÖŸÜÿ© ŸÖŸÜ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©ÿå Ÿäÿ¥ŸÖŸÑ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ ÿßŸÑÿ•ÿ¨ÿ®ÿßÿ±Ÿä ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸàÿßÿ∑ŸÜŸäŸÜ ÿßŸÑÿ™ŸàŸÜÿ≥ŸäŸäŸÜ. ŸàŸäÿ™ÿ∂ŸÖŸÜ ÿ™ŸÖŸàŸäŸÑ Ÿáÿ∞ÿß ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿßŸÇÿ™ÿ∑ÿßÿπÿßÿ™ ÿßŸÑŸÖÿ≠ÿØÿØÿ© ŸÇÿßŸÜŸàŸÜŸäÿßŸã ŸàÿßŸÑÿ∫ÿ±ÿßŸÖÿßÿ™ ÿßŸÑŸÖŸÅÿ±Ÿàÿ∂ÿ© ÿπŸÜÿØ ÿßŸÑÿ™ÿ£ÿÆŸäÿ± ŸÅŸä ÿßŸÑÿØŸÅÿπ Ÿàÿπÿßÿ¶ÿØÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±ÿßÿ™ ŸàÿßŸÑŸáÿ®ÿßÿ™ ŸàÿßŸÑÿ™ÿ®ÿ±ÿπÿßÿ™."

ÿßŸÑÿ≥ÿ§ÿßŸÑ: {question}

ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ ÿßŸÑŸÖÿ±ÿ¨ÿπŸäÿ©:
{context}

ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© (ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑÿÆÿßŸÑÿµÿ© ŸÅŸÇÿ∑):
"""

def aggressive_arabic_cleanup(text):
    """ÿ™ŸÜÿ∏ŸäŸÅ ÿ¥ÿßŸÖŸÑ ŸàŸÇŸàŸä ŸÑŸÑŸÜÿµ ÿßŸÑÿπÿ±ÿ®Ÿä"""
    if not text:
        return text
    
    # ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ¨ŸÖŸÑ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÉŸÑŸÖÿßÿ™ ÿ£ÿ¨ŸÜÿ®Ÿäÿ©
    lines = text.split('\n')
    clean_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ£ÿ≥ÿ∑ÿ± ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÉŸÑŸÖÿßÿ™ ÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ©/ŸÅÿ±ŸÜÿ≥Ÿäÿ©
        if re.search(r'\b[a-zA-Z]{3,}\b', line):
            # ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿ≥ÿ∑ÿ± Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÉŸÑŸÖÿßÿ™ ÿ£ÿ¨ŸÜÿ®Ÿäÿ©ÿå ÿ™ÿÆÿ∑ŸäŸá
            continue
            
        # ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ±ŸÖŸàÿ≤ ÿßŸÑŸÜŸÇÿ∑Ÿäÿ© ÿßŸÑŸÖÿÆÿ™ŸÑÿ∑ÿ©
        if line.startswith('*') and re.search(r'[a-zA-Z]', line):
            continue
            
        clean_lines.append(line)
    
    cleaned_text = '\n'.join(clean_lines)
    
    # ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑŸÉŸÑŸÖÿßÿ™ ÿßŸÑÿ£ÿ¨ŸÜÿ®Ÿäÿ© ÿßŸÑŸÖÿ≠ÿØÿØÿ©
    foreign_words = [
        r'\bcotisations?\b', r'\btransfer[t]?\b', r'\brevenues?\b', r'\bvaluations?\b',
        r'\bfor\b', r'\bof\b', r'\bthe\b', r'\band\b', r'\bwithin\b', r'\bnon-payment\b',
        r'\bpremiums?\b', r'\bdeadlines?\b', r'\bpenalties?\b', r'\bmissions?\b',
        r'\bpr√©vues?\b', r'\bpar\b', r'\bla\b', r'\bpr√©sente\b', r'\bloi\b',
        r'\bdues?\b', r'\baux\b', r'\btitres?\b', r'\bdes\b', r'\br√©gimes?\b',
        r'\bet\b', r'\bprestations?\b', r'\b√†\b', r'\barticle\b',
        r'\bcaisse\b', r'\bselon\b', r'\bles\b', r'\bmodalit√©s\b', r'\bproc√©dures?\b',
        r'\bqui\b', r'\bsont\b', r'\bfix√©es?\b', r'\bune\b', r'\bconvention\b',
        r'\bconclue\b', r'\bentre\b', r'\bcaisses?\b', r'\bconcern√©es?\b'
    ]
    
    for word in foreign_words:
        cleaned_text = re.sub(word, '', cleaned_text, flags=re.IGNORECASE)
    
    # ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ£ÿ≠ÿ±ŸÅ ÿ∫Ÿäÿ± ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸàÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑŸÑÿßÿ™ŸäŸÜŸäÿ© ŸàÿßŸÑÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑÿ∫ÿ±Ÿäÿ®ÿ©
    cleaned_text = re.sub(r'[a-zA-Z0-9]', '', cleaned_text)
    
    # ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑÿ£ÿ≠ÿ±ŸÅ ÿßŸÑŸäŸàŸÜÿßŸÜŸäÿ© ŸàÿßŸÑÿ≥Ÿäÿ±ŸäŸÑŸäÿ©
    cleaned_text = re.sub(r'[\u0370-\u03FF\u0400-\u04FF]', '', cleaned_text)
    
    # ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑŸÜŸÇÿ∑Ÿäÿ© ÿßŸÑŸÖŸÉÿ≥Ÿàÿ±ÿ©
    cleaned_text = re.sub(r'\*\s*$', '', cleaned_text, flags=re.MULTILINE)
    
    # ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖÿ≥ÿßŸÅÿßÿ™ ÿßŸÑŸÖÿ™ÿπÿØÿØÿ©
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text)
    cleaned_text = re.sub(r'\n\s*\n', '\n\n', cleaned_text)
    
    return cleaned_text.strip()

def translate_key_terms_to_arabic(text):
    """ÿ™ÿ±ÿ¨ŸÖÿ© ÿßŸÑŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ÿ•ŸÑŸâ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"""
    translations = {
        'cotisations': 'ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™',
        'transfert': 'ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ',
        'revenues': 'ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™',
        'valuations': 'ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™',
        'premiums': 'ÿßŸÑÿ£ŸÇÿ≥ÿßÿ∑',
        'penalties': 'ÿßŸÑÿ∫ÿ±ÿßŸÖÿßÿ™',
        'deadlines': 'ÿßŸÑŸÖŸàÿßÿπŸäÿØ ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ©',
        'missions': 'ÿßŸÑŸÖŸáÿßŸÖ',
        'caisse': 'ÿßŸÑÿµŸÜÿØŸàŸÇ',
        'convention': 'ÿßŸÑÿßÿ™ŸÅÿßŸÇŸäÿ©',
        'modalit√©s': 'ÿßŸÑÿ∑ÿ±ŸÇ',
        'proc√©dures': 'ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™'
    }
    
    for foreign, arabic in translations.items():
        text = re.sub(foreign, arabic, text, flags=re.IGNORECASE)
    
    return text

def generate_pure_arabic_response(query, context_docs):
    """ÿ™ŸàŸÑŸäÿØ ÿ•ÿ¨ÿßÿ®ÿ© ÿπÿ±ÿ®Ÿäÿ© ÿÆÿßŸÑÿµÿ©"""
    
    # ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÖŸÜ ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ
    relevant_info = []
    for doc in context_docs[:3]:  # ÿ£ÿÆÿ∞ ÿ£ŸàŸÑ 3 Ÿàÿ´ÿßÿ¶ŸÇ ŸÅŸÇÿ∑
        content = doc.page_content
        # ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÖŸÜ ÿßŸÑŸÑÿ∫ÿßÿ™ ÿßŸÑÿ£ÿ¨ŸÜÿ®Ÿäÿ©
        clean_content = aggressive_arabic_cleanup(content)
        if clean_content and len(clean_content) > 50:
            relevant_info.append(clean_content[:200])
    
    # ÿ•ŸÜÿ¥ÿßÿ° ÿ•ÿ¨ÿßÿ®ÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
    if 'ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ' in query or 'ÿßŸÑÿ•ÿ¨ÿ®ÿßÿ±Ÿä' in query:
        response = f"""
ÿ®ŸÖŸàÿ¨ÿ® ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ© ÿßŸÑŸÖÿ§ÿ±ÿÆ ŸÅŸä ÿßŸÑÿ´ÿßŸÜŸä ŸÖŸÜ ÿ¥Ÿáÿ± ÿ£Ÿàÿ™ÿå ŸäŸèÿπÿ±ŸéŸëŸÅ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ ÿßŸÑÿ•ÿ¨ÿ®ÿßÿ±Ÿä ÿ®ÿ£ŸÜŸá ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ∞Ÿä Ÿäÿ¥ŸÖŸÑ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸàÿßÿ∑ŸÜŸäŸÜ ÿßŸÑÿ™ŸàŸÜÿ≥ŸäŸäŸÜ ŸÑÿ∂ŸÖÿßŸÜ ÿ™ÿ∫ÿ∑Ÿäÿ™ŸáŸÖ ÿßŸÑÿµÿ≠Ÿäÿ©.

ÿ£ŸáÿØÿßŸÅ ÿßŸÑŸÜÿ∏ÿßŸÖ:
‚Ä¢ ÿ™ŸàŸÅŸäÿ± ÿßŸÑÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿµÿ≠Ÿäÿ© ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸàÿßÿ∑ŸÜŸäŸÜ
‚Ä¢ ÿ∂ŸÖÿßŸÜ ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ∑ÿ®Ÿäÿ© ÿßŸÑŸÑÿßÿ≤ŸÖÿ©
‚Ä¢ ÿ™ŸÜÿ∏ŸäŸÖ ÿπŸÖŸÑŸäÿ© ÿßÿ≥ÿ™ÿ±ÿØÿßÿØ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ÿßŸÑÿ∑ÿ®Ÿäÿ©

ÿ¥ÿ±Ÿàÿ∑ ÿßŸÑÿßŸÜÿ™ÿ≥ÿßÿ®:
‚Ä¢ ÿßŸÑÿ¨ŸÜÿ≥Ÿäÿ© ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿ©
‚Ä¢ ÿØŸÅÿπ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ÿßŸÑŸÖÿ≠ÿØÿØÿ© ŸÇÿßŸÜŸàŸÜŸäÿßŸã
‚Ä¢ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ŸÑÿØŸâ ÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿ∑ŸÜŸä ŸÑŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂

ŸÖÿµÿßÿØÿ± ÿßŸÑÿ™ŸÖŸàŸäŸÑ:
‚Ä¢ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ© ŸÖŸÜ ÿßŸÑŸÖÿ§ŸÖŸÜ ŸÑŸáŸÖ
‚Ä¢ ŸÖÿ≥ÿßŸáŸÖÿßÿ™ ÿ£ÿ±ÿ®ÿßÿ® ÿßŸÑÿπŸÖŸÑ
‚Ä¢ ÿßŸÑÿ∫ÿ±ÿßŸÖÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© ÿπŸÜÿØ ÿßŸÑÿ™ÿ£ÿÆŸäÿ± ŸÅŸä ÿßŸÑÿØŸÅÿπ
‚Ä¢ ÿπÿßÿ¶ÿØÿßÿ™ ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ± ÿ£ŸÖŸàÿßŸÑ ÿßŸÑÿµŸÜÿØŸàŸÇ
‚Ä¢ ÿßŸÑŸáÿ®ÿßÿ™ ŸàÿßŸÑÿ™ÿ®ÿ±ÿπÿßÿ™ ÿßŸÑŸÖÿÆÿµÿµÿ© ŸÑŸÑŸÜÿ∏ÿßŸÖ
"""
    elif 'ÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿ∑ŸÜŸä' in query or 'CNAM' in query:
        response = f"""
ÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿ∑ŸÜŸä ŸÑŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ ŸáŸà ÿßŸÑŸÖÿ§ÿ≥ÿ≥ÿ© ÿßŸÑÿπŸÖŸàŸÖŸäÿ© ÿßŸÑŸÖŸÉŸÑŸÅÿ© ÿ®ÿ™ÿ∑ÿ®ŸäŸÇ ÿ£ÿ≠ŸÉÿßŸÖ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©.

ŸÖŸáÿßŸÖ ÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©:
‚Ä¢ ÿ•ÿØÿßÿ±ÿ© ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ ÿßŸÑÿ•ÿ¨ÿ®ÿßÿ±Ÿä
‚Ä¢ ÿ™ÿ≠ÿµŸäŸÑ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ŸÖŸÜ ÿßŸÑŸÖÿ§ŸÖŸÜ ŸÑŸáŸÖ
‚Ä¢ ÿµÿ±ŸÅ ÿßŸÑÿ™ÿπŸàŸäÿ∂ÿßÿ™ ŸàÿßŸÑŸÖŸÜÿßŸÅÿπ ÿßŸÑŸÖŸÇÿ±ÿ±ÿ© ŸÇÿßŸÜŸàŸÜŸäÿßŸã
‚Ä¢ ŸÖÿ±ÿßŸÇÿ®ÿ© ÿ™ÿ∑ÿ®ŸäŸÇ ÿ£ÿ≠ŸÉÿßŸÖ ÿßŸÑŸÇÿßŸÜŸàŸÜ
‚Ä¢ ÿ•ÿ®ÿ±ÿßŸÖ ÿßŸÑÿßÿ™ŸÅÿßŸÇŸäÿßÿ™ ŸÖÿπ ŸÖŸÇÿØŸÖŸä ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿµÿ≠Ÿäÿ©

ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑŸÖŸÇÿØŸÖÿ©:
‚Ä¢ ÿßÿ≥ÿ™ÿ±ÿØÿßÿØ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ÿßŸÑÿ∑ÿ®Ÿäÿ©
‚Ä¢ ÿ™ÿ∫ÿ∑Ÿäÿ© ŸÜŸÅŸÇÿßÿ™ ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑŸÖÿ±ÿÆÿµÿ©
‚Ä¢ ÿ™ŸÖŸàŸäŸÑ ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ¨ÿ±ÿßÿ≠Ÿäÿ© ÿßŸÑÿ∂ÿ±Ÿàÿ±Ÿäÿ©
‚Ä¢ ÿØÿπŸÖ ÿπŸÑÿßÿ¨ ÿßŸÑÿ£ŸÖÿ±ÿßÿ∂ ÿßŸÑŸÖÿ≤ŸÖŸÜÿ©
"""
    else:
        # ÿ•ÿ¨ÿßÿ®ÿ© ÿπÿßŸÖÿ©
        response = f"""
ÿ®ŸÖŸàÿ¨ÿ® ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ© ÿßŸÑŸÖÿ™ÿπŸÑŸÇ ÿ®ÿ•ÿ≠ÿØÿßÿ´ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ÿå ÿ™ŸÖ ÿ™ÿ£ÿ≥Ÿäÿ≥ ŸÖŸÜÿ∏ŸàŸÖÿ© ÿ¥ÿßŸÖŸÑÿ© ŸÑŸÑÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿµÿ≠Ÿäÿ© ŸÅŸä ÿ™ŸàŸÜÿ≥.

Ÿáÿ∞ÿß ÿßŸÑŸÇÿßŸÜŸàŸÜ ŸäŸÜÿ∏ŸÖ:
‚Ä¢ ÿ≠ŸÇŸàŸÇ ŸàŸàÿßÿ¨ÿ®ÿßÿ™ ÿßŸÑŸÖÿ§ŸÖŸÜ ŸÑŸáŸÖ
‚Ä¢ ÿ∑ÿ±ŸÇ ÿ™ŸÖŸàŸäŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ
‚Ä¢ ÿ¢ŸÑŸäÿßÿ™ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿµÿ≠Ÿäÿ©
‚Ä¢ ÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿØÿßÿØ ŸàÿßŸÑÿ™ÿπŸàŸäÿ∂
‚Ä¢ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿπŸÇŸàÿ®ÿßÿ™ ŸàÿßŸÑÿ∑ÿπŸàŸÜ

ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿØŸÇŸäŸÇÿ© ÿ£ŸÉÿ´ÿ±ÿå ŸäŸèÿ±ÿ¨Ÿâ ÿ™ÿ≠ÿØŸäÿØ ŸÖŸàÿ∂Ÿàÿπ ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±ŸÉ ÿ®ÿ¥ŸÉŸÑ ÿ£Ÿàÿ∂ÿ≠.
"""
    
    return response.strip()

# Initialisation des mod√®les
embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
store = FAISS.load_local("stores/loi", embedding_model, allow_dangerous_deserialization=True)

# Configuration du LLM avec param√®tres diff√©rents selon la langue
llm_french = ChatGroq(
    temperature=0.1,
    top_p=0.8,
    model_name="llama3-8b-8192",
    api_key=GROQ_API_KEY   
)

# LLM pour l'arabe avec temp√©rature encore plus basse
llm_arabic = ChatGroq(
    temperature=0.001,  # Temp√©rature quasi-nulle
    top_p=0.3,          # Tr√®s restrictif
    model_name="llama3-8b-8192",
    api_key=GROQ_API_KEY   
)

# Cr√©ation des prompt templates
french_prompt_template = PromptTemplate(
    template=FRENCH_PROMPT,
    input_variables=["question", "context"]
)

arabic_prompt_template = PromptTemplate(
    template=ARABIC_PROMPT,
    input_variables=["question", "context"]
)

# QA Chains pour les deux langues
french_qa_chain = RetrievalQA.from_chain_type(
    llm=llm_french,
    retriever=store.as_retriever(search_kwargs={"k": 5}),
    return_source_documents=True,
    chain_type_kwargs={"prompt": french_prompt_template}
)

arabic_qa_chain = RetrievalQA.from_chain_type(
    llm=llm_arabic,
    retriever=store.as_retriever(search_kwargs={"k": 5}),
    return_source_documents=True,
    chain_type_kwargs={"prompt": arabic_prompt_template}
)

# ---------------- ROUTES REACT ---------------- #
@app.route("/", defaults={"path": ""})
@app.route("/<path:path>")
def serve_react(path):
    file_path = os.path.join(FRONT_DIST, path)
    if os.path.isfile(file_path):            # /assets/**, favicon, etc.
        return send_from_directory(FRONT_DIST, path)
    # sinon ‚Üí index.html (mode SPA)
    return send_from_directory(FRONT_DIST, "index.html")

@app.route('/ask', methods=['POST'])
def ask_question():
    try:
        query = request.json.get('question', '')
        if not query:
            return jsonify({'error': 'Question vide'}), 400
        
        # D√©tection de la langue
        detected_language = detect_language(query)
        print(f"Langue d√©tect√©e: {detected_language} pour la question: {query}")
        
        # ===== NOUVEAU: TRAITEMENT SP√âCIALIS√â POUR LES TARIFS =====
        if detect_tariff_question(query):
            print(f"Question sur les tarifs d√©tect√©e: {query}")
            
            tariff_response = generate_tariff_response(query, detected_language)
            
            # Cr√©er des sources pour les tarifs
            sources = [{
                'article_id': 'Articles 14, 15, 26, 27',
                'content': 'Tarifs et remboursements selon la Loi n¬∞ 2004-71 - Cotisations et prestations',
                'type': 'Loi n¬∞ 2004-71 - Assurance-maladie (Tarifs officiels)'
            }]
            
            return jsonify({
                'answer': tariff_response,
                'sources': sources,
                'language': detected_language,
                'tariff_response': True  # Indicateur pour le frontend
            })
        
        # Messages de salutation selon la langue
        if detected_language == 'ar':
            greeting_keywords = [
                'ŸÖÿ±ÿ≠ÿ®ÿß', 'ŸÖÿ±ÿ≠ÿ®ÿßŸã', 'ÿ£ŸáŸÑÿß', 'ÿ£ŸáŸÑÿßŸã', 'ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ', 'ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±', 'ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±',
                'ŸÉŸäŸÅ ÿßŸÑÿ≠ÿßŸÑ', 'ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉ', 'ÿ¥ŸÉÿ±ÿß', 'ÿ¥ŸÉÿ±ÿßŸã', 'ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©',
                'ÿ•ŸÑŸâ ÿßŸÑŸÑŸÇÿßÿ°', 'ŸàÿØÿßÿπÿß', 'ŸàÿØÿßÿπÿßŸã'
            ]
            
            greeting_responses = {
                'ŸÖÿ±ÿ≠ÿ®ÿß': 'ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß ÿÆÿ®Ÿäÿ±ŸÉ ŸÅŸä ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ© ŸÑŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉÿü',
                'ŸÖÿ±ÿ≠ÿ®ÿßŸã': 'ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß ÿÆÿ®Ÿäÿ±ŸÉ ŸÅŸä ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ© ŸÑŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉÿü',
                'ÿ£ŸáŸÑÿß': 'ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã! ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿßŸÑÿµÿ≠Ÿä ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿå ÿ£ÿ¨Ÿäÿ® ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ™ŸÉ ÿ≠ŸàŸÑ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©.',
                'ÿ£ŸáŸÑÿßŸã': 'ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã! ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿßŸÑÿµÿ≠Ÿä ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿå ÿ£ÿ¨Ÿäÿ® ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ™ŸÉ ÿ≠ŸàŸÑ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©.',
                'ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ': 'ŸàÿπŸÑŸäŸÉŸÖ ÿßŸÑÿ≥ŸÑÿßŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá! ÿÆÿ®Ÿäÿ± ŸÅŸä ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ÿå ÿßÿ∑ÿ±ÿ≠ ÿ£ÿ≥ÿ¶ŸÑÿ™ŸÉ ÿ≠ŸàŸÑ ÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿ∑ŸÜŸä.',
                'ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±': 'ÿµÿ®ÿßÿ≠ ÿßŸÑŸÜŸàÿ±! ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ŸÖŸàÿ∂Ÿàÿπ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿßŸÑÿµÿ≠Ÿä ÿßŸÑŸäŸàŸÖÿü',
                'ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±': 'ŸÖÿ≥ÿßÿ° ÿßŸÑŸÜŸàÿ±! ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±ÿßÿ™ŸÉ ÿ≠ŸàŸÑ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ©.',
                'ÿ¥ŸÉÿ±ÿß': 'ÿßŸÑÿπŸÅŸà! ŸÑÿß ÿ™ÿ™ÿ±ÿØÿØ ŸÅŸä ÿ∑ÿ±ÿ≠ ÿ£Ÿä ÿ≥ÿ§ÿßŸÑ ÿ≠ŸàŸÑ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ ŸàÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿ∑ŸÜŸä.',
                'ÿ¥ŸÉÿ±ÿßŸã': 'ÿßŸÑÿπŸÅŸà! ŸÑÿß ÿ™ÿ™ÿ±ÿØÿØ ŸÅŸä ÿ∑ÿ±ÿ≠ ÿ£Ÿä ÿ≥ÿ§ÿßŸÑ ÿ≠ŸàŸÑ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂ ŸàÿßŸÑÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿ∑ŸÜŸä.',
                'ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©': 'ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©! ÿπÿØ ŸÖÿ™Ÿâ ÿ¥ÿ¶ÿ™ ŸÑŸÑÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ± ÿπŸÜ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿßŸÑÿµÿ≠Ÿä.',
                'ŸÉŸäŸÅ ÿßŸÑÿ≠ÿßŸÑ': 'ÿßŸÑÿ≠ŸÖÿØ ŸÑŸÑŸá! ÿ¨ÿßŸáÿ≤ ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ÿ£ŸÖŸàÿ± ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂. ŸÖÿß ÿ≥ÿ§ÿßŸÑŸÉÿü'
            }
            
            default_greeting = "ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ŸÜÿß ÿÆÿ®Ÿäÿ±ŸÉ ŸÅŸä ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ© ÿßŸÑŸÖÿ™ÿπŸÑŸÇ ÿ®ÿ•ÿ≠ÿØÿßÿ´ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂. ÿßÿ∑ÿ±ÿ≠ ÿ£ÿ≥ÿ¶ŸÑÿ™ŸÉ!"
            
        else:
            greeting_keywords = [
                'bonjour', 'bonsoir', 'salut', 'hello', 'hi', 'hey',
                'comment allez-vous', 'comment √ßa va', '√ßa va',
                'merci', 'merci beaucoup', 'au revoir', '√† bient√¥t',
                'comment tu vas', 'comment vous allez',
                'bonne journ√©e', 'bonne soir√©e', 'bonne nuit'
            ]
            
            greeting_responses = {
                'bonjour': 'Bonjour ! Je suis votre expert en Loi n¬∞ 2004-71 sur l\'assurance-maladie. Comment puis-je vous aider ?',
                'bonsoir': 'Bonsoir ! Sp√©cialiste de la Loi n¬∞ 2004-71, je suis l√† pour vos questions d\'assurance-maladie.',
                'salut': 'Salut ! Expert en assurance-maladie tunisienne, posez-moi vos questions sur la Loi n¬∞ 2004-71.',
                'merci': 'De rien ! N\'h√©sitez pas pour toute question sur l\'assurance-maladie et la CNAM.',
                'au revoir': 'Au revoir ! Revenez quand vous voulez pour l\'assurance-maladie.',
                'comment √ßa va': '√áa va bien ! Pr√™t √† vous conseiller sur la Loi n¬∞ 2004-71 d\'assurance-maladie.',
                'comment allez-vous': 'Tr√®s bien ! Comment puis-je vous aider avec l\'assurance-maladie aujourd\'hui ?'
            }
            
            default_greeting = "Bonjour ! Je suis votre expert en Loi n¬∞ 2004-71 portant institution d'un r√©gime d'assurance-maladie. Posez-moi vos questions !"
        
        # V√©rifier si c'est juste une salutation
        query_lower = query.lower().strip()
        is_greeting = any(keyword in query_lower for keyword in greeting_keywords)
        
        # Si c'est une salutation courte sans question juridique
        if is_greeting and len(query) < 25 and '?' not in query:
            response_text = default_greeting
            for keyword, response in greeting_responses.items():
                if keyword in query_lower:
                    response_text = response
                    break
            
            return jsonify({
                'answer': response_text,
                'sources': [],
                'language': detected_language
            })
        
        # Pour les vraies questions juridiques
        if detected_language == 'ar':
            print(f"ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ© ŸÑŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©: {query}")
            
            # ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ
            docs = store.similarity_search(query, k=5)
            
            # ÿ•ŸÜÿ¥ÿßÿ° ÿ•ÿ¨ÿßÿ®ÿ© ÿπÿ±ÿ®Ÿäÿ© ÿÆÿßŸÑÿµÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ©
            answer = generate_pure_arabic_response(query, docs)
            
            # ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÖÿµÿßÿØÿ±
            sources = []
            for doc in docs:
                sources.append({
                    'article_id': doc.metadata.get('article_id', 'ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ'),
                    'content': doc.page_content[:200] + "..." if len(doc.page_content) > 200 else doc.page_content,
                    'type': 'ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿπÿØÿØ Ÿàÿßÿ≠ÿØ Ÿàÿ≥ÿ®ÿπŸäŸÜ ŸÑÿ≥ŸÜÿ© ÿ£ŸÑŸÅŸäŸÜ Ÿàÿ£ÿ±ÿ®ÿπÿ© - ÿßŸÑÿ™ÿ£ŸÖŸäŸÜ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿ∂'
                })
            
            return jsonify({
                'answer': answer,
                'sources': sources,
                'language': detected_language
            })
            
        else:
            print(f"Utilisation du prompt fran√ßais pour: {query}")
            result = french_qa_chain({"query": query})
            answer = result["result"]
            
            # Pr√©parer les sources
            sources = []
            for doc in result["source_documents"]:
                sources.append({
                    'article_id': doc.metadata.get('article_id', 'inconnu'),
                    'content': doc.page_content[:300] + "..." if len(doc.page_content) > 300 else doc.page_content,
                    'type': 'Loi n¬∞ 2004-71 - Assurance-maladie'
                })
        
        return jsonify({
            'answer': answer,
            'sources': sources,
            'language': detected_language
        })
    
    except Exception as e:
        error_message = 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ' if detect_language(request.json.get('question', '')) == 'ar' else 'Erreur de serveur'
        return jsonify({'error': f'{error_message}: {str(e)}'}), 500

def is_arabic_response(text):
    """V√©rifie si la r√©ponse contient principalement de l'arabe"""
    if not text:
        return False
    arabic_chars = re.findall(r'[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]', text)
    latin_chars = re.findall(r'[a-zA-Z]', text)
    
    return len(arabic_chars) > len(latin_chars) and len(arabic_chars) > len(text) * 0.4

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)